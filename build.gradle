buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
		hibernateOgm = '5.1.0.Final'
		hibernateCore = '5.1.5.Final'
		hibernateSearch = '5.6.1.Final'
		hibernateValidator = '5.4.1.Final'
		assertJ = '3.6.2'
		log4j2 = '2.8.2'
		mongoDriver = '3.4.2'
		jta = '1.1'
		fongo = '2.0.13'
		el_api = '3.0.1-b04'
		glassfish_el = '3.0.1-b08'
		gradleVersion = '3.5'
	}
	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

allprojects {

	repositories {
		mavenCentral()
		jcenter()
	}

	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	group = 'com.brodma'
	version = '0.3'

	repositories {
		mavenCentral()
		jcenter()
	}
	configurations {
		compile.exclude group:'ch.qos.logback'
	}

	dependencies {
		compile('org.springframework.boot:spring-boot-starter')
		compile("org.apache.logging.log4j:log4j-core:${log4j2}")
		compile("org.apache.logging.log4j:log4j-api:${log4j2}")
		compile("org.apache.logging.log4j:log4j-slf4j-impl:${log4j2}")
		compile("org.hibernate:hibernate-core:${hibernateCore}")
		compile("org.hibernate:hibernate-entitymanager:${hibernateCore}")
		compile("org.hibernate:hibernate-search:${hibernateSearch}")
		compile("org.hibernate:hibernate-validator:${hibernateValidator}")
		compile('org.springframework.boot:spring-boot-starter-data-jpa')
		compile('org.springframework.boot:spring-boot-starter-data-mongodb')
		compile("org.hibernate.ogm:hibernate-ogm-core:${hibernateOgm}")
		compile("org.hibernate.ogm:hibernate-ogm-mongodb:${hibernateOgm}")
		compile("javax.transaction:jta:${jta}")
		compile("org.mongodb:mongo-java-driver:${mongoDriver}")
		compile("javax.el:javax.el-api:${el_api}")
		compile("org.glassfish:javax.el:${glassfish_el}")
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile("org.assertj:assertj-core:${assertJ}")
		testCompile("com.github.fakemongo:fongo:${fongo}")
	}
}

task wrapper(type: Wrapper) {
	description = 'Generates Gradle wrapper files with specific Gradle version'
	distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}
